executable("tir") {
    libs = []

    sources = [
        "src/tir.cpp",

        "src/core.cpp",
        "src/lexer.cpp",
        "src/memory.cpp",
        "src/string.cpp",
        "src/process.cpp",

        "external/MurmurHash/MurmurHash3.cpp"
    ]

    include_dirs = [
        "build",
        "external"
    ]

    lib_dirs = []

    if (current_os == "win") {
        sources += [
            "src/win32_file.cpp",
            "src/win32_memory.cpp",
            "src/win32_thread.cpp",
        ]

        libs += ["user32", "shell32", "gdi32", "shlwapi"]

        lib_dirs += [ "//external/LLVM/lib/win64" ]
        include_dirs += [ "//external/LLVM/include" ]

        libs += [
            "LLVMAnalysis",
            "LLVMCore",
            "LLVMSupport",
            "LLVMTarget",
            "LLVMTargetParser",
            "LLVMBinaryFormat",
            "LLVMMCA",
            "LLVMSelectionDAG",
            "LLVMGlobalISel",
            "LLVMCFGuard",
            "LLVMAsmPrinter",
            "LLVMAsmParser",
            "LLVMTransformUtils",
            "LLVMIRPrinter",
            "LLVMIRReader",
            "LLVMScalarOpts",
            "LLVMProfileData",
            "LLVMInstrumentation",
            "LLVMDebugInfoCodeView",
            "LLVMDebugInfoDWARF",
            "LLVMObject",
            "LLVMTextAPI",
            "LLVMObjCARCOpts",

            "LLVMMC",
            "LLVMMCParser",
            "LLVMMCDisassembler",

            "LLVMDemangle",
            "LLVMRemarks",

            "LLVMBitReader",
            "LLVMBitStreamReader",
            "LLVMBitWriter",

            "LLVMCodeGen",
            "LLVMCodeGenTypes",

            "LLVMX86Info",
            "LLVMX86AsmParser",
            "LLVMX86Desc",
            "LLVMX86CodeGen",
            "LLVMX86TargetMCA",
        ]
    } else if (current_os == "linux") {
        include_dirs += [ "/usr/lib/llvm-16/include" ]
        libs += [ "LLVM-16" ]

        sources += [
            "src/linux_file.cpp",
            "src/linux_memory.cpp",
            "src/linux_thread.cpp",
        ]
    }
}

group("tools") {
    deps = [ "//tools/gh" ]
}

action_foreach("gh") {
    deps = [ "//tools/gh" ]
    script = "tools/exe.py"
    sources = [
        "src/tir.cpp",
        "src/core.cpp",
        "src/lexer.cpp",
        "src/memory.cpp",
        "src/string.cpp",
    ]

    mnemonic = "generate-headers"

    outputs = [
        "$target_gen_dir/{{source_name_part}}.h",
        "$target_gen_dir/internal/{{source_name_part}}.h",
    ]

    if (current_os == "win") {
        exe = rebase_path(root_build_dir, "") + "/gh.exe"
    } else {
        exe = rebase_path(root_build_dir, "") + "/gh"
    }

    args = [
        exe,
        "{{source}}",
        "-o", rebase_path(target_gen_dir, ""),
    ]
}
